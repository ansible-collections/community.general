- name: Test inside Docker
  when:
  - ansible_facts.virtualization_type == 'docker'
  block:
  - set_fact:
      output_dir_test: '{{ output_dir }}/test_sysctl'
  - name: make sure our testing sub-directory does not exist
    file:
      path: '{{ output_dir_test }}'
      state: absent
  - name: create our testing sub-directory
    file:
      path: '{{ output_dir_test }}'
      state: directory
  - name: copy the example conf to the test dir
    copy:
      src: sysctl.conf
      dest: '{{ output_dir_test }}'
  - name: Set vm.swappiness to 5
    sysctl:
      name: vm.swappiness
      value: 5
      state: present
      reload: false
      sysctl_file: '{{ output_dir_test }}/sysctl.conf'
    register: sysctl_test0
  - debug:
      var: sysctl_test0
      verbosity: 1
  - name: get file content
    shell: cat {{ output_dir_test }}/sysctl.conf | egrep -v ^\#
    register: sysctl_content0
  - debug:
      var: sysctl_content0
      verbosity: 1
  - name: Set vm.swappiness to 5 again
    sysctl:
      name: vm.swappiness
      value: 5
      state: present
      reload: false
      sysctl_file: '{{ output_dir_test }}/sysctl.conf'
    register: sysctl_test1
  - name: validate results
    assert:
      that:
      - sysctl_test0 is changed
      - sysctl_test1 is not changed
      - sysctl_content0.stdout_lines[sysctl_content0.stdout_lines.index("vm.swappiness=5")]
        == "vm.swappiness=5"
  - name: Remove kernel.panic
    sysctl:
      name: kernel.panic
      value: 2
      reload: false
      state: absent
      sysctl_file: '{{ output_dir_test }}/sysctl.conf'
    register: sysctl_test2
  - name: get file content
    shell: cat {{ output_dir_test }}/sysctl.conf | egrep -v ^\#
    register: sysctl_content2
  - debug:
      var: item
      verbosity: 1
    with_items:
    - '{{ sysctl_test2 }}'
    - '{{ sysctl_content2 }}'
  - name: Validate results for key removal
    assert:
      that:
      - sysctl_test2 is changed
      - '''kernel.panic'' not in sysctl_content2.stdout_lines'
  - name: Test remove kernel.panic again
    sysctl:
      name: kernel.panic
      value: 2
      state: absent
      reload: false
      sysctl_file: '{{ output_dir_test }}/sysctl.conf'
    register: sysctl_test2_change_test
  - name: Assert that no change was made
    assert:
      that:
      - sysctl_test2_change_test is not changed
  - name: Try sysctl with an invalid value
    sysctl:
      name: net.ipv4.ip_forward
      value: foo
    register: sysctl_test3
    ignore_errors: true
  - debug:
      var: sysctl_test3
      verbosity: 1
  - name: validate results for test 3
    assert:
      that:
      - sysctl_test3 is failed
  - name: set net.ipv4.ip_forward
    sysctl:
      name: net.ipv4.ip_forward
      value: 1
      sysctl_set: true
      reload: false
    register: sysctl_test3
  - name: check with sysctl command
    shell: sysctl net.ipv4.ip_forward
    register: sysctl_check3
  - debug:
      var: item
      verbosity: 1
    with_items:
    - '{{ sysctl_test3 }}'
    - '{{ sysctl_check3 }}'
  - name: validate results for test 3
    assert:
      that:
      - sysctl_test3 is changed
      - sysctl_check3.stdout_lines == ["net.ipv4.ip_forward = 1"]
  - name: Try sysctl with no name
    sysctl:
      name: null
      value: 1
      sysctl_set: true
    ignore_errors: true
    register: sysctl_no_name
  - name: validate nameless results
    assert:
      that:
      - sysctl_no_name is failed
      - sysctl_no_name.msg == 'name cannot be None'
  - name: Try sysctl with no value
    sysctl:
      name: Foo
      value: null
      sysctl_set: true
    ignore_errors: true
    register: sysctl_no_value
  - name: validate nameless results
    assert:
      that:
      - sysctl_no_value is failed
      - sysctl_no_value.msg == 'value cannot be None'
  - name: Try sysctl with an invalid value
    sysctl:
      name: net.ipv4.ip_forward
      value: foo
      sysctl_set: true
    register: sysctl_test4
    ignore_errors: true
  - debug:
      var: sysctl_test4
      verbosity: 1
  - name: validate results for test 4
    assert:
      that:
      - sysctl_test4 is failed
- name: Test on RHEL VMs
  when:
  - ansible_facts.virtualization_type != 'docker'
  - ansible_facts.distribution == 'RedHat'
  block:
  - name: Set sysctl property using module
    sysctl:
      name: vm.swappiness
      value: '22'
      state: present
      reload: true
    register: sysctl_set1
  - name: Change sysctl property using command
    command: sysctl vm.swappiness=33
  - name: Set sysctl property using module
    sysctl:
      name: vm.swappiness
      value: '22'
      state: present
      reload: true
    register: sysctl_set2
  - name: Read /etc/sysctl.conf
    command: egrep -v ^# /etc/sysctl.conf
    register: sysctl_conf_content
  - name: Get current value of vm.swappiness
    command: sysctl -n vm.swappiness
    register: sysctl_current_vm_swappiness
  - name: Ensure changes were made appropriately
    assert:
      that:
      - sysctl_set1 is changed
      - sysctl_set2 is changed
      - '''vm.swappiness=22'' in sysctl_conf_content.stdout_lines'
      - sysctl_current_vm_swappiness.stdout == '22'
  - name: Set the same value using module in check mode
    sysctl:
      name: vm.swappiness
      value: '22'
      state: present
      reload: true
    check_mode: true
    register: sysctl_check_mode1
  - name: Set a different value using module in check mode
    sysctl:
      name: vm.swappiness
      value: '44'
      state: present
      reload: true
    check_mode: true
    register: sysctl_check_mode2
  - name: Read /etc/sysctl.conf
    command: egrep -v ^# /etc/sysctl.conf
    register: sysctl_check_mode_conf_content
  - name: Get current value of vm.swappiness
    command: sysctl -n vm.swappiness
    register: sysctl_check_mode_current_vm_swappiness
  - name: Ensure no changes were made in check mode
    assert:
      that:
      - sysctl_check_mode1 is success
      - sysctl_check_mode2 is changed
      - '''vm.swappiness=22'' in sysctl_check_mode_conf_content.stdout_lines'
      - sysctl_check_mode_current_vm_swappiness.stdout == '22'
