---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Test systemd_creds_encrypt
  when:
    - ansible_systemd.version is defined
    - ansible_systemd.version | int >= 250
  block:
    - name: Encrypt secret
      become: true
      systemd_creds_encrypt:
        name: db
        not_after: +48hr
        secret: access_token
      register: encrypted_secret

    - name: Assert encrypted secret output is base64 encoded
      ansible.builtin.assert:
        that:
          - (encrypted_secret.value | b64decode) is truthy
        fail_msg: "Encrypted secret is not base64 encoded"
        success_msg: "Encrypted secret is base64 encoded"

    - name: Print the encrypted secret
      ansible.builtin.debug:
        msg: "{{ encrypted_secret }}"

    - name: Assert that SetCredentialEncrypted message is not in the output
      ansible.builtin.assert:
        that:
          - '"SetCredentialEncrypted" not in encrypted_secret.value'
        fail_msg: "SetCredentialEncrypted is in the output"
        success_msg: "SetCredentialEncrypted is not in the output"

    - name: Encrypt secret
      become: true
      community.general.systemd_creds_encrypt:
        name: web
        not_after: +5y
        pretty: true
        secret: token
      register: pretty_encrypted_secret

    - name: Pretty print the encrypted secret
      ansible.builtin.debug:
        msg: "{{ pretty_encrypted_secret }}"

    - name: Assert that SetCredentialEncrypted message is in the output
      ansible.builtin.assert:
        that:
          - '"SetCredentialEncrypted=web: " in pretty_encrypted_secret.value'
        fail_msg: "SetCredentialEncrypted is not in the output"
        success_msg: "SetCredentialEncrypted is in the output"

    - name: Ensure the dest file doesn't already exist
      ansible.builtin.file:
        path: "{{ remote_tmp_dir }}/systemd_cred_encrypt_test_secret.cred"
        state: absent

    - name: Encrypt secret into the dest file
      community.general.systemd_creds_encrypt:
        secret: token
        dest: "{{ remote_tmp_dir }}/systemd_cred_encrypt_test_secret.cred"
      register: encrypted_dest

    - name: Assert that the task changes when no secret was present
      ansible.builtin.assert:
        that:
          - "encrypted_dest.changed"
        fail_msg: "The task didn't change, but should have"
        success_msg: "The task changed, as it should have"

    - name: Check if the dest file exists
      stat:
        path: "{{ remote_tmp_dir }}/systemd_cred_encrypt_test_secret.cred"
      register: dest_file

    - name: Assert that the dest file exists
      ansible.builtin.assert:
        that:
          - "dest_file.stat.exists"
        fail_msg: "The dest file doesn't exist"
        success_msg: "The dest file does exist"

    - name: Encrypt the same secret into the same dest file as before
      community.general.systemd_creds_encrypt:
        secret: token
        dest: "{{ remote_tmp_dir }}/systemd_cred_encrypt_test_secret.cred"
      register: encrypted_dest_again

    - name: Assert that the task doesn't change with the same secret
      ansible.builtin.assert:
        that:
          - "not encrypted_dest_again.changed"
        fail_msg: "The task changed, but shouldn't have"
        success_msg: "The task didn't change, as it should have"

    - name: Encrypt a different secret into the same dest file as before
      community.general.systemd_creds_encrypt:
        secret: another token
        dest: "{{ remote_tmp_dir }}/systemd_cred_encrypt_test_secret.cred"
      register: encrypted_dest_again

    - name: Assert that the task changes with a different secret
      ansible.builtin.assert:
        that:
          - "encrypted_dest_again.changed"
        fail_msg: "The task didn't change, but should have"
        success_msg: "The task changed, as it should have"
