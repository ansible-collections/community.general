---
- debug:
    msg: "START ce_is_is_view presented integration tests on connection={{ ansible_connection }}"
- include_tasks: setup.yaml

- name: present the provided configuration with the exisiting running configuration
  ce_is_is_view: &present
    instance_id: 100
    description: ISIS
    islevel: level_1
    coststyle: narrow
    relaxSpfLimit: true
    stdlevel1cost: 60
    stdlevel2cost: 60
    stdbandwidth: 100
    autocostenable: true
    autocostenablecompatible: true
  register: result

- name: Assert the configuration is reflected on host
  assert:
    that:
      - "result['changed'] == true"

- name: Get basic config by ce_netconf.
  ce_netconf: &get_config
    rpc: get
    cfg_xml: "<filter type=\"subtree\">
               <isiscomm xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">
                  <isSites>
                   <isSite>
                    <instanceId>100</instanceId>
                    <description></description>
                    <isLevel></isLevel>
                    <costStyle></costStyle>
                    <relaxSpfLimit></relaxSpfLimit>
                    <stdLevel1Cost></stdLevel1Cost>
                    <stdLevel2Cost></stdLevel2Cost>
                    <stdbandwidth></stdbandwidth>
                    <stdAutoCostEnable></stdAutoCostEnable>
                   <stdAutoCostEnableCompatible></stdAutoCostEnableCompatible>
                 </isSite>
              </isiscomm>
            </filter>"
  register: result_xml


- name: present the provided configuration with the existing running configuration (IDEMPOTENT)
  ce_is_is_view: *present
  register: repeat

- name: Assert that the previous task was idempotent
  assert:
    that:
      - "repeat.changed == false"
      - "'<instanceId>100</instanceId>' in result_xml.end_state.result"
      - "'<vpnName>_public_</vpnName>' in result_xml.end_state.result"
      - "'<description>ISIS</description>' in result_xml.end_state.result"
      - "'<isLevel>level_1</isLevel>' in result_xml.end_state.result"
      - "'<costStyle>narrow</costStyle>' in result_xml.end_state.result"
      - "'<relaxSpfLimit>true</relaxSpfLimit>' in result_xml.end_state.result"
      - "'<stdLevel1Cost>60</stdLevel1Cost>' in result_xml.end_state.result"
      - "'<stdLevel2Cost>60</stdLevel2Cost>' in result_xml.end_state.result"
      - "'<stdbandwidth>100</stdbandwidth>' in result_xml.end_state.result"
      - "'<stdAutoCostEnable>true</stdAutoCostEnable>' in result_xml.end_state.result"
      - "'<stdAutoCostEnableCompatible>true</stdAutoCostEnableCompatible>' in result_xml.end_state.result"

- name: present the provided configuration with the exisiting running configuration
  ce_is_is_view: &absent
    instance_id: 100
    description: ISIS
    islevel: level_1
    coststyle: narrow
    relaxSpfLimit: true
    stdlevel1cost: 60
    stdlevel2cost: 60
    stdbandwidth: 100
    autocostenable: true
    autocostenablecompatible: true
    state: absent
  register: result


- name: Assert the configuration is reflected on host
  assert:
    that:
      - "result['changed'] == true"

- name: present the provided configuration with the existing running configuration (IDEMPOTENT)
  ce_is_is_view: *absent
  register: repeat

- name: Get basic config by ce_netconf.
  ce_netconf: *get_config
  register: result_xml

- name: Assert that the previous task was idempotent
  assert:
    that:
      - "repeat.changed == false"
      - "'<instanceId>100</instanceId>' not in result_xml.end_state.result"
      - "'<vpnName>_public_</vpnName>' not in result_xml.end_state.result"
      - "'<description>ISIS</description>' not in result_xml.end_state.result"
      - "'<isLevel>level_1</isLevel>' not in result_xml.end_state.result"
      - "'<costStyle>narrow</costStyle>' not in result_xml.end_state.result"
      - "'<relaxSpfLimit>true</relaxSpfLimit>' not in result_xml.end_state.result"
      - "'<stdLevel1Cost>60</stdLevel1Cost>' not in result_xml.end_state.result"
      - "'<stdLevel2Cost>60</stdLevel2Cost>' not in result_xml.end_state.result"
      - "'<stdbandwidth>100</stdbandwidth>' not in result_xml.end_state.result"
      - "'<stdAutoCostEnable>true</stdAutoCostEnable>' not in result_xml.end_state.result"
      - "'<stdAutoCostEnableCompatible>true</stdAutoCostEnableCompatible>' not in result_xml.end_state.result"
# after present, isis 100 should be deleted
- include_tasks: cleanup.yaml
- debug:
    msg: "END ce_is_is_view presentd integration tests on connection={{ ansible_connection }}"
