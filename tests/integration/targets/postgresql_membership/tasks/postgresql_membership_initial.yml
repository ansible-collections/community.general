- name: postgresql_membership - create test roles
  become_user: '{{ pg_user }}'
  become: true
  postgresql_user:
    login_user: '{{ pg_user }}'
    db: postgres
    name: '{{ item }}'
  ignore_errors: true
  with_items:
  - '{{ test_group1 }}'
  - '{{ test_group2 }}'
  - '{{ test_group3 }}'
  - '{{ test_user1 }}'
  - '{{ test_user2 }}'
- name: postgresql_membership - grant test_group1 to test_user1 in check_mode
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: present
  register: result
  ignore_errors: true
  check_mode: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == ["GRANT \"{{ test_group1 }}\" TO \"{{ test_user1 }}\""]
    - result.granted.{{ test_group1 }} == ["{{ test_user1 }}"]
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - try to revoke test_group1 from test_user1 for checking
    check_mode
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: absent
  register: result
  ignore_errors: true
  check_mode: true
- assert:
    that:
    - result is not changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == []
    - result.revoked.{{ test_group1 }} == []
    - result.state == "absent"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - grant test_group1 to test_user1
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: present
  register: result
  ignore_errors: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == ["GRANT \"{{ test_group1 }}\" TO \"{{ test_user1 }}\""]
    - result.granted.{{ test_group1 }} == ["{{ test_user1 }}"]
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - grant test_group1 to test_user1 again
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: present
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == []
    - result.granted.{{ test_group1 }} == []
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - revoke test_group1 from test_user1
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: absent
  register: result
  ignore_errors: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == ["REVOKE \"{{ test_group1 }}\" FROM \"{{ test_user1 }}\""]
    - result.revoked.{{ test_group1 }} == ["{{ test_user1 }}"]
    - result.state == "absent"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - revoke test_group1 from test_user1 again
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: absent
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == []
    - result.revoked.{{ test_group1 }} == []
    - result.state == "absent"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - grant two groups to two users
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group:
    - '{{ test_group1 }}'
    - '{{ test_group2 }}'
    user:
    - '{{ test_user1 }}'
    - '{{ test_user2 }}'
    state: present
  register: result
  ignore_errors: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}", "{{ test_group2 }}"]
    - result.queries == ["GRANT \"{{ test_group1 }}\" TO \"{{ test_user1 }}\"", "GRANT
      \"{{ test_group1 }}\" TO \"{{ test_user2 }}\"", "GRANT \"{{ test_group2 }}\"
      TO \"{{ test_user1 }}\"", "GRANT \"{{ test_group2 }}\" TO \"{{ test_user2 }}\""]
    - result.granted.{{ test_group1 }} == ["{{ test_user1 }}", "{{ test_user2 }}"]
    - result.granted.{{ test_group2 }} == ["{{ test_user1 }}", "{{ test_user2 }}"]
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}", "{{ test_user2 }}"]
- name: postgresql_membership - grant two groups to two users again
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group:
    - '{{ test_group1 }}'
    - '{{ test_group2 }}'
    user:
    - '{{ test_user1 }}'
    - '{{ test_user2 }}'
    state: present
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
    - result.groups == ["{{ test_group1 }}", "{{ test_group2 }}"]
    - result.queries == []
    - result.granted.{{ test_group1 }} == []
    - result.granted.{{ test_group2 }} == []
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}", "{{ test_user2 }}"]
- name: postgresql_membership - revoke one group from one user
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group1 }}'
    user: '{{ test_user1 }}'
    state: absent
  register: result
  ignore_errors: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}"]
    - result.queries == ["REVOKE \"{{ test_group1 }}\" FROM \"{{ test_user1 }}\""]
    - result.revoked.{{ test_group1 }} == ["{{ test_user1 }}"]
    - result.state == "absent"
    - result.target_roles == ["{{ test_user1 }}"]
- name: postgresql_membership - grant two groups to two users again
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group:
    - '{{ test_group1 }}'
    - '{{ test_group2 }}'
    user:
    - '{{ test_user1 }}'
    - '{{ test_user2 }}'
    state: present
  register: result
  ignore_errors: true
- assert:
    that:
    - result is changed
    - result.groups == ["{{ test_group1 }}", "{{ test_group2 }}"]
    - result.queries == ["GRANT \"{{ test_group1 }}\" TO \"{{ test_user1 }}\""]
    - result.granted.{{ test_group1 }} == ["{{ test_user1 }}"]
    - result.granted.{{ test_group2 }} == []
    - result.state == "present"
    - result.target_roles == ["{{ test_user1 }}", "{{ test_user2 }}"]
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: fake_group
    user: fake_user
    state: present
    fail_on_role: true
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: fake_group
    user: fake_user
    state: present
    fail_on_role: false
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
    - result.granted == {}
    - result.groups == []
    - result.target_roles == []
    - result.state == 'present'
- name: postgresql_membership - revoke non existen group from non existen role
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: fake_group
    user: fake_user
    state: absent
    fail_on_role: false
  register: result
  ignore_errors: true
- assert:
    that:
    - result is not changed
    - result.revoked == {}
    - result.groups == []
    - result.target_roles == []
    - result.state == 'absent'
- name: postgresql_membership - grant test_group3 with dots to test_user1
  become_user: '{{ pg_user }}'
  become: true
  postgresql_membership:
    login_user: '{{ pg_user }}'
    db: postgres
    group: '{{ test_group3 }}'
    user: '{{ test_user1 }}'
    state: present
  register: result
- assert:
    that:
    - result is changed
    - result.queries == ["GRANT \"{{ test_group3 }}\" TO \"{{ test_user1 }}\""]
