---
- block:
  - name: Create random network name
    set_fact:
      nname: "{{ 'ansible-test-%0x' % ((2**32) | random) }}"

  - name: Make sure network is not there
    docker_network:
      name: "{{ nname }}"
      state: absent
      force: yes

  - name: Inspect a non-present network
    docker_network_info:
      name: "{{ nname }}"
    register: result

  - assert:
      that:
      - "not result.exists"
      - "'network' in result"
      - "result.network is none"

  - name: Make sure network exists
    docker_network:
      name: "{{ nname }}"
      state: present

  - name: Inspect a present network
    docker_network_info:
      name: "{{ nname }}"
    register: result
  - name: Dump docker_network_info result
    debug: var=result

  - name: "Comparison: use 'docker network inspect'"
    command: docker network inspect "{{ nname }}"
    register: docker_inspect
    ignore_errors: yes
  - block:
    - set_fact:
        docker_inspect_result: "{{ docker_inspect.stdout | from_json }}"
    - name: Dump docker inspect result
      debug: var=docker_inspect_result
    when: docker_inspect is not failed

  - name: Cleanup
    docker_network:
      name: "{{ nname }}"
      state: absent
      force: yes

  - assert:
      that:
      - result.exists
      - "'network' in result"
      - "result.network"

  - assert:
      that:
      - "result.network == docker_inspect_result[0]"
    when: docker_inspect is not failed
  - assert:
      that:
        - "'is too new. Maximum supported API version is' in docker_inspect.stderr"
    when: docker_inspect is failed

  when: docker_py_version is version('1.8.0', '>=') and docker_api_version is version('1.21', '>=')

- fail: msg="Too old docker / docker-py version to run docker_network_info tests!"
  when: not(docker_py_version is version('1.8.0', '>=') and docker_api_version is version('1.21', '>=')) and (ansible_distribution != 'CentOS' or ansible_distribution_major_version|int > 6)
