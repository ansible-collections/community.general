- name: get current plan details
  win_shell: '$plan_info = powercfg.exe /list

    ($plan_info | Select-String -Pattern ''\(([\w\s]*)\) \*$'').Matches.Groups[1].Value

    ($plan_info | Select-String -Pattern ''\(([\w\s]*)\)$'').Matches.Groups[1].Value

    '
  register: plan_info
- set_fact:
    original_plan: '{{ plan_info.stdout_lines[0] }}'
    name: '{{ plan_info.stdout_lines[1] }}'
- block:
  - name: set power plan (check mode)
    win_power_plan:
      name: '{{ name }}'
    register: set_plan_check
    check_mode: true
  - name: get result of set power plan (check mode)
    win_shell: (powercfg.exe /list | Select-String -Pattern '\({{ name }}\)').Line
    register: set_plan_check_result
    changed_when: false
  - name: assert setting plan (check mode)
    assert:
      that:
      - set_plan_check is changed
      - not set_plan_check_result.stdout_lines[0].endswith('*')
  - name: set power plan
    win_power_plan:
      name: '{{ name }}'
    register: set_plan
  - name: get result of set power plan
    win_shell: (powercfg.exe /list | Select-String -Pattern '\({{ name }}\)').Line
    register: set_plan_result
    changed_when: false
  - name: assert setting plan
    assert:
      that:
      - set_plan is changed
      - set_plan_result.stdout_lines[0].endswith('*')
  - name: set power plan (idempotent)
    win_power_plan:
      name: '{{ name }}'
    register: set_plan_idempotent
  - name: assert setting plan (idempotent)
    assert:
      that:
      - set_plan_idempotent is not changed
  always:
  - name: always change back plan to the original when done testing
    win_power_plan:
      name: '{{ original_plan }}'
