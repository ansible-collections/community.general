---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Creating a 500MB file for the first loop device
  ansible.builtin.command: dd if=/dev/zero of={{ remote_tmp_dir }}/test_lvm_pv_01.img bs=1M count=500
  args:
    creates: "{{ remote_tmp_dir }}/test_lvm_pv_01.img"

- name: Creating a 1000MB file for the second loop device
  ansible.builtin.command: dd if=/dev/zero of={{ remote_tmp_dir }}/test_lvm_pv_02.img bs=1M count=1000
  args:
    creates: "{{ remote_tmp_dir }}/test_lvm_pv_02.img"

- name: Creating loop device
  ansible.builtin.command: losetup -f
  register: loop_device_01

- name: Associating loop device with file
  ansible.builtin.command: 'losetup {{ loop_device_01.stdout }} {{ remote_tmp_dir }}/test_lvm_pv_01.img'

- name: Creating loop device
  ansible.builtin.command: losetup -f
  register: loop_device_02

- name: Associating loop device with file
  ansible.builtin.command: 'losetup {{ loop_device_02.stdout }} {{ remote_tmp_dir }}/test_lvm_pv_02.img'

- name: Creating physical volume for the first loop device
  community.general.lvm_pv:
    device: "{{ loop_device_01.stdout }}"
  register: pv_creation_result_01

- name: Checking the first physical volume size
  ansible.builtin.command: pvs --noheadings -o pv_size --units M {{ loop_device_01.stdout }}
  register: pv_size_output_01

- name: Creating physical volume for the second loop device
  community.general.lvm_pv:
    device: "{{ loop_device_02.stdout }}"
  register: pv_creation_result_02

- name: Checking the second physical volume size
  ansible.builtin.command: pvs --noheadings -o pv_size --units M {{ loop_device_02.stdout }}
  register: pv_size_output_02

- name: Creating volume group on top of first device {{ loop_device_01.stdout }}
  community.general.lvg:
    vg: vg_tmp_test
    pvs: "{{ loop_device_01.stdout }}"
  register: vg_creation_result

- name: Creating LV lv_tmp_test on VG vg_tmp_test
  community.general.lvol:
    vg: vg_tmp_test
    lv: lv_tmp_test
    size: 100%FREE
    force: true
  register: lv_creation_result

- name: Creating xfs filesystem on LV lv_tmp_test
  community.general.filesystem:
    dev: /dev/vg_tmp_test/lv_tmp_test
    fstype: xfs
    state: present
  register: fs_creation_result

#- name: Mounting LV lv_tmp_test to {{ remote_tmp_dir }}/tmp_mount
#  ansible.builtin.shell: mount -o rw,noauto /dev/vg_tmp_test/lv_tmp_test {{ remote_tmp_dir }}/tmp_mount

- name: Mounting LV lv_tmp_test
  ansible.posix.mount:
    fstab: '{{ remote_tmp_dir }}/fstab'
    path: '{{ remote_tmp_dir }}/tmp_mount'
    src: '/dev/vg_tmp_test/lv_tmp_test'
    fstype: xfs
    opts: rw,noauto
    state: mounted

- name: Asserting physical volume was created
  ansible.builtin.assert:
    that:
      - pv_creation_result_01.changed == true
      - pv_creation_result_02.changed == true
      - vg_creation_result.changed == true
      - (pv_size_output_01.stdout | trim | regex_replace('M', '') | float) > 95
      - (pv_size_output_01.stdout | trim | regex_replace('M', '') | float) < 120
      - (pv_size_output_02.stdout | trim | regex_replace('M', '') | float) > 190
      - (pv_size_output_02.stdout | trim | regex_replace('M', '') | float) < 220
      - "'created' in pv_creation_result_01.msg"
      - "'created' in pv_creation_result_02.msg"
