- name: Create a high privileged user
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ db_session_role1 }}"
    state: "present"
    password: "password"
    role_attr_flags: "CREATEDB,LOGIN,CREATEROLE"
    login_user: "{{ pg_user }}"
    db: postgres

- name: Create DB as session_role
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: present
    name: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    session_role: "{{ db_session_role1 }}"
  register: result

- name: Check that pg_extension exists (PostgreSQL >= 9.1)
  become_user: "{{ pg_user }}"
  become: yes
  shell: echo "select count(*) from pg_class where relname='pg_extension' and relkind='r'" | psql -AtXq postgres
  register: pg_extension

- name: Remove plpgsql from testdb using postgresql_ext
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_ext:
    name: plpgsql
    db: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    state: absent
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- name: Fail when trying to create an extension as a mere mortal user
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_ext:
    name: plpgsql
    db: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    session_role: "{{ db_session_role2 }}"
  ignore_errors: yes
  register: result
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- assert:
    that:
      - result is failed
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- name: Install extension as session_role
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_ext:
    name: plpgsql
    db: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    session_role: "{{ db_session_role1 }}"
    trust_input: no
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- name: Check that extension is created and is owned by session_role
  become_user: "{{ pg_user }}"
  become: yes
  shell: echo "select rolname from pg_extension join pg_roles on extowner=pg_roles.oid where extname='plpgsql';" | psql -AtXq "{{ db_session_role1 }}"
  register: result
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- assert:
    that:
      - "result.stdout_lines[-1] == '{{ db_session_role1 }}'"
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- name: Remove plpgsql from testdb using postgresql_ext
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_ext:
    name: plpgsql
    db: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    state: absent
    trust_input: no
  when:
     "pg_extension.stdout_lines[-1] == '1'"

- name: Drop test db
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: absent
    name: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"

- name: Drop test users
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ item }}"
    state: absent
    login_user: "{{ pg_user }}"
    db: postgres
  with_items:
    - "{{ db_session_role1 }}"
    - "{{ db_session_role2 }}"
