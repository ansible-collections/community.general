- vars:
    user_token: "{{ user_token_cmd.stdout }}"
  block:
    - name: Fetch secrets using "hashi_vault" lookup
      set_fact:
        gen_secret1: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_gen_path ~ '/secret1 auth_method=token token=' ~ user_token) }}"
        gen_secret2: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_gen_path ~ '/secret2: token=' ~ user_token) }}"
        kv1_secret1: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secret1 auth_method=token token=' ~ user_token) }}"
        kv1_secret2: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secret2: token=' ~ user_token) }}"
        kv1_secret1_value: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secret1:value auth_method=token token=' ~ user_token) }}"
        kv1_secret2_as_raw: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secret2: token=' ~ user_token, return_format='raw') }}"
        kv1_secrets_as_dict: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secrets token=' ~ user_token, return_format='dict') }}"
        kv1_secrets_as_values: "{{ query('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secrets token=' ~ user_token, return_format='values') }}"
        kv2_secret1: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret1 auth_method=token token=' ~ user_token) }}"
        kv2_secret2: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret2: token=' ~ user_token) }}"
        kv2_secret1_value: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret1:value auth_method=token token=' ~ user_token) }}"
        kv2_secret2_as_raw: "{{ lookup('community.general.hashi_vault', vault_kv2_path ~ '/secret2 ' ~ conn_params, auth_method='token', token=user_token, return_format='raw') }}"
        kv2_secrets_as_dict: "{{ lookup('community.general.hashi_vault', vault_kv2_multi_path ~ '/secrets ' ~ conn_params, auth_method='token', token=user_token) }}"
        kv2_secrets_as_values: "{{ query('community.general.hashi_vault', vault_kv2_multi_path ~ '/secrets ' ~ conn_params, auth_method='token', token=user_token, return_format='values') }}"

    - name: Check secret generic values
      assert:
        that:
          - "gen_secret1 == {'value': 'foo1'}"
          - "gen_secret2 == {'value': 'foo2'}"

    - name: Check KV v1 secret values
      assert:
        that:
          - "kv1_secret1 == {'value': 'foo1'}"
          - "kv1_secret2 == {'value': 'foo2'}"
          - kv1_secret1_value == 'foo1'

    - name: Check KV v1 secret raw return value
      assert:
        that:
          - "'data' in kv1_secret2_as_raw"
          - kv1_secret2_as_raw.data == kv1_secret2

    - name: Check KV v1 multiple fields as values
      assert:
        that:
          - kv1_secrets_as_values | type_debug == 'list'
          - kv1_secrets_as_values | symmetric_difference(['foo1', 'foo2', 'foo3']) | length == 0

    - name: Check KV v1 multiple fields as dict
      assert:
        that:
          - kv1_secrets_as_dict | type_debug == 'dict'
          - kv1_secrets_as_dict | length == 3
          - kv1_secrets_as_dict.value1 == 'foo1'
          - kv1_secrets_as_dict.value2 == 'foo2'
          - kv1_secrets_as_dict.value3 == 'foo3'

    - name: Check KV v2 secret values
      assert:
        that:
          - "kv2_secret1.data == {'value': 'foo1'}"
          - "kv2_secret2.data == {'value': 'foo2'}"
          - kv2_secret1_value == 'foo1'

    - name: Check KV v2 secret raw return value
      assert:
        that:
          - "'data' in kv2_secret2_as_raw"
          - "'data' in kv2_secret2_as_raw.data"
          - "'metadata' in kv2_secret2_as_raw.data"
          - kv2_secret2_as_raw.data.data == kv2_secret2.data

    - name: Check KV v2 multiple fields as values
      assert:
        that:
          - kv2_secrets_as_values | type_debug == 'list'
          - kv2_secrets_as_values | symmetric_difference(['foo1', 'foo2', 'foo3']) | length == 0

    - name: Check KV v2 multiple fields as dict
      assert:
        that:
          - "'data' in kv2_secrets_as_dict"
          - "'metadata' in kv2_secrets_as_dict"
          - kv2_secrets_as_dict.data | type_debug == 'dict'
          - kv2_secrets_as_dict.data | length == 3
          - kv2_secrets_as_dict.data.value1 == 'foo1'
          - kv2_secrets_as_dict.data.value2 == 'foo2'
          - kv2_secrets_as_dict.data.value3 == 'foo3'

    - name: Failure expected when erroneous credentials are used
      vars:
        secret_wrong_cred: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret2 auth_method=token token=wrong_token') }}"
      debug:
        msg: Failure is expected ({{ secret_wrong_cred }})
      register: test_wrong_cred
      ignore_errors: true

    - name: Failure expected when unauthorized secret is read
      vars:
        secret_unauthorized: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret3 token=' ~ user_token) }}"
      debug:
        msg: Failure is expected ({{ secret_unauthorized }})
      register: test_unauthorized
      ignore_errors: true

    - name: Failure expected when nonexistent secret is read
      vars:
        secret_nonexistent: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret4 token=' ~ user_token) }}"
      debug:
        msg: Failure is expected ({{ secret_nonexistent }})
      register: test_nonexistent
      ignore_errors: true

    - name: Failure expected when nonexistent field is requested from KV v1
      vars:
        secret_badfield: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv1_path ~ '/secret1:value2 token=' ~ user_token) }}"
      debug:
        msg: Failure is expected ({{ secret_badfield }})
      register: test_badfield_kv1
      ignore_errors: true

    - name: Failure expected when nonexistent field is requested from KV v2
      vars:
        secret_badfield: "{{ lookup('community.general.hashi_vault', conn_params ~ 'secret=' ~ vault_kv2_path ~ '/secret1:value2 token=' ~ user_token) }}"
      debug:
        msg: Failure is expected ({{ secret_badfield }})
      register: test_badfield_kv2
      ignore_errors: true

    - name: Check expected failures
      assert:
        that:
          - test_wrong_cred is failed
          - test_unauthorized is failed
          - test_nonexistent is failed
          - test_badfield_kv1 is failed
          - test_badfield_kv2 is failed
