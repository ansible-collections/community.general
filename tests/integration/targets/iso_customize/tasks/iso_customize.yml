# Copyright (c) 2022, Ansible Project
# Copyright (c) 2022, VMware, Inc. All Rights Reserved.
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: "Customize ISO file"
  community.general.iso_customize:
    src_iso: "{{ test_dir }}/test.iso"
    dest_iso: "{{ test_dir }}/{{ dest_iso_name }}"
    delete_files:
      - "/test01.cfg"
    add_files:
      - src_file: "{{ test_dir }}/test01.cfg"
        dest_file: "/preseed/ubuntu.seed"
  register: customize_iso_result

- name: "Display the ISO customized result"
  debug: var=customize_iso_result

- name: Test customize iso result
  assert:
    that:
    - customize_iso_result is not failed

- name: Create sub directory to mount customized ISO
  file:
    path: '{{ test_dir }}/iso_mount'
    state: directory

- debug: var=ansible_distribution

- name: "Mount customized ISO"
  ansible.posix.mount:
    path: "{{ test_dir }}/iso_mount"
    src: "{{ test_dir }}/{{ dest_iso_name }}"
    opts: "ro,noauto"
    fstab: "{{ test_dir }}/temp.fstab"
    fstype: "iso9660"
    boot: false
    state: mounted
  register: mount_result
  when: ansible_distribution != "MacOSX"

- name: "Mount customized ISO on MAC"
  shell: "hdiutil attach {{ test_dir }}/{{ dest_iso_name }} -mountroot {{ test_dir }}/iso_mount"
  register: mount_result
  when: ansible_distribution == "MacOSX"

- name: "Display the mount result"
  debug: var=mount_result

# For MAC, we have different root directory for different type of ISO
- set_fact:
    mount_root_dir: "{{ test_dir }}/iso_mount/disk_image"
  when: ansible_distribution == "MacOSX"

- set_fact:
    mount_root_dir: "{{ test_dir }}/iso_mount/AUTOINSTALL"
  when: dest_iso_name.find('joliet') != -1

- set_fact:
    mount_root_dir: "{{ test_dir }}/iso_mount/CDROM"
  when: dest_iso_name.find('udf') != -1

# For not MAC, the root directory is iso_mount
- set_fact:
    mount_root_dir: "{{ test_dir }}/iso_mount"
  when: ansible_distribution != "MacOSX"

- debug: var=mount_root_dir

- name: Check the file test01.cfg is deleted
  stat:
    path: "{{ mount_root_dir }}/test01.cfg"
  register: check_file

- assert:
    that:
    - check_file.stat.exists == False

- name: Check the file /preseed/ubuntu.seed is added
  stat:
    path: "{{ mount_root_dir }}/preseed/ubuntu.seed"
  register: check_file

- assert:
    that:
    - check_file.stat.exists == True

- name: Umount ISO
  mount:
    path: "{{ mount_root_dir }}"
    fstab: "{{ test_dir }}/temp.fstab"
    state: unmounted

- name: Delete directory
  file:
    path: "{{ test_dir }}/iso_mount"
    state: absent

- name: Delete iso file after testing
  file:
    path: "{{ test_dir }}/test.iso"
    state: absent