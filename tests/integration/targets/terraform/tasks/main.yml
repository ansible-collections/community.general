- name: Check if terraform is present
  command: "command -v terraform"
  register: terraform_binary_path
  ignore_errors: true

- name: Check Terraform version
  command: terraform version
  register: terraform_version_output
  when: terraform_binary_path.rc == 0

- name: Set terraform version
  set_fact:
    terrform_version_installed: "{{ terraform_version_output.stdout | regex_search('(?!Terraform.*)(v[0-9]+\\.[0-9]+\\.[0-9]+)') }}"
  when: terraform_version_output.changed

- name: Execute Terraform install tasks
  block:

  - name: Ensure unzip is present
    ansible.builtin.package:
      name: unzip
      state: present

  - name: Install Terraform
    debug:
      msg: "Installing terraform {{ terraform_version }}, found {{ terraform_version_installed | default('v0.0.0') }}"

  - name: Install Terraform binary
    unarchive:
      src: "{{ terraform_url }}"
      dest: "{{ remote_tmp_dir }}"
      mode: 0755
      remote_src: yes
      validate_certs: "{{ validate_certs }}"

  when: terraform_version_installed is not defined or terrform_version_installed != terraform_version

- name: Create terraform project directory
  file:
    path: "{{terraform_project_dir}}/{{ item['name'] }}"
    state: directory
    mode: 0755
  loop: "{{ terraform_provider_versions }}"
  loop_control:
    index_var: provider_index

- name: Loop over provider upgrade test tasks
  include_tasks: test_provider_upgrade.yml
  vars:
    tf_provider: "{{ terraform_provider_versions[provider_index] }}"
  loop: "{{ terraform_provider_versions }}"
  loop_control:
    index_var: provider_index