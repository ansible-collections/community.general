- vars:
    test_table: acme
    data_file_txt: /tmp/data.txt
    data_file_csv: /tmp/data.csv
    task_parameters:
      become_user: '{{ pg_user }}'
      become: true
      register: result
    pg_parameters:
      login_user: '{{ pg_user }}'
      login_db: postgres
  block:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - create test table
    postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      columns:
      - id int
      - name text
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - insert rows into test table
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: INSERT INTO {{ test_table }} (id, name) VALUES (1, 'first')
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - ensure that test data files don't exist
    file:
      path: '{{ item }}'
      state: absent
    with_items:
    - '{{ data_file_csv }}'
    - '{{ data_file_txt }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check_mode, copy test table content to data_file_txt
    check_mode: true
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_to: '{{ data_file_txt }}'
      src: '{{ test_table }}'
  - assert:
      that:
      - result is changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check that data_file_txt doesn't exist
    ignore_errors: true
    shell: head -n 1 '{{ data_file_txt }}'
  - assert:
      that:
      - result.failed == true
      - result.rc == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check_mode, copy test table content from data_file_txt
    check_mode: true
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_from: '{{ data_file_txt }}'
      dst: '{{ test_table }}'
  - assert:
      that:
      - result is changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check that test table continue to have one row
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT * FROM {{ test_table }}
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check_mode, copy non existent table to data_file_txt
    check_mode: true
    ignore_errors: true
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_to: '{{ data_file_txt }}'
      src: non_existent_table
  - assert:
      that:
      - result.failed == true
      - result.queries is not defined
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - copy test table data to data_file_txt
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_to: '{{ data_file_txt }}'
      src: '{{ test_table }}'
  - assert:
      that:
      - result is changed
      - result.queries == ["COPY \"{{ test_table }}\" TO '{{ data_file_txt }}'"]
      - result.src == '{{ test_table }}'
      - result.dst == '{{ data_file_txt }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check data_file_txt exists and not empty
    shell: head -n 1 {{ data_file_txt }}
  - assert:
      that:
      - result.stdout == '1\tfirst'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - copy test table data to data_file_csv with options and
      columns
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_to: '{{ data_file_csv }}'
      src: '{{ test_table }}'
      columns:
      - id
      - name
      options:
        format: csv
  - assert:
      that:
      - result is changed
      - result.queries == ["COPY \"{{ test_table }}\" (id,name) TO '{{ data_file_csv
        }}' (format csv)"]
      - result.src == '{{ test_table }}'
      - result.dst == '{{ data_file_csv }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check data_file_csv exists and not empty
    shell: head -n 1 {{ data_file_csv }}
  - assert:
      that:
      - result.stdout == '1,first'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - copy from data_file_csv to test table
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      copy_from: '{{ data_file_csv }}'
      dst: '{{ test_table }}'
      columns:
      - id
      - name
      options:
        format: csv
  - assert:
      that:
      - result is changed
      - result.queries == ["COPY \"{{ test_table }}\" (id,name) FROM '{{ data_file_csv
        }}' (format csv)"]
      - result.dst == '{{ test_table }}'
      - result.src == '{{ data_file_csv }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check that there are two rows in test table after the
      prev step
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT * FROM {{ test_table }}  WHERE id = '1' AND name = 'first'
  - assert:
      that:
      - result.rowcount == 2
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - test program option, copy to program
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      src: '{{ test_table }}'
      copy_to: /bin/true
      program: true
      columns: id, name
      options:
        delimiter: '|'
    when: ansible_distribution != 'FreeBSD'
  - assert:
      that:
      - result is changed
      - result.queries == ["COPY \"{{ test_table }}\" (id, name) TO PROGRAM '/bin/true'
        (delimiter '|')"]
      - result.src == '{{ test_table }}'
      - result.dst == '/bin/true'
    when: ansible_distribution != 'FreeBSD'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - test program option, copy from program
    postgresql_copy:
      login_user: '{{ pg_user }}'
      login_db: postgres
      dst: '{{ test_table }}'
      copy_from: echo 1,first
      program: true
      columns: id, name
      options:
        delimiter: ','
  - assert:
      that:
      - result is changed
      - result.queries == ["COPY \"{{ test_table }}\" (id, name) FROM PROGRAM 'echo
        1,first' (delimiter ',')"]
      - result.dst == '{{ test_table }}'
      - result.src == 'echo 1,first'
    when: ansible_distribution != 'FreeBSD'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - check that there are three rows in test table after the
      prev step
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: postgres
      query: SELECT * FROM {{ test_table }} WHERE id = '1' AND name = 'first'
  - assert:
      that:
      - result.rowcount == 3
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - remove test table
    postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_table }}'
      state: absent
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_copy - remove test data files
    file:
      path: '{{ item }}'
      state: absent
    with_items:
    - '{{ data_file_csv }}'
    - '{{ data_file_txt }}'
