---
# Copyright (c) 2023 Aritra Sen <aretrosen@proton.me>
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: "Download Nodejs"
  unarchive:
    src: "https://ansible-ci-files.s3.amazonaws.com/test/integration/targets/pnpm/{{ nodejs_path }}.tar.gz"
    dest: "{{ remote_tmp_dir }}"
    remote_src: true
    creates: "{{ remote_tmp_dir }}/{{ nodejs_path }}.tar.gz"

- name: "Download Pnpm"
  unarchive:
    src: "https://ansible-ci-files.s3.amazonaws.com/test/integration/targets/pnpm/pnpm-v{{pnpm_version}}.tar.gz"
    dest: "{{ remote_tmp_dir }}"
    remote_src: true
    creates: "{{ remote_tmp_dir }}/pnpm-v{{pnpm_version}}_pkg.tar.gz"

- name: Remove any previous Nodejs modules
  file:
    path: "{{remote_tmp_dir}}/node_modules"
    state: absent

- vars:
    node_bin_path: "{{ remote_tmp_dir }}/{{ nodejs_path }}/bin"
    pnpm_bin_path: "{{ remote_tmp_dir }}/pnpm-v{{ pnpm_version }}/bin"
    package: "tailwindcss"
  environment:
    PATH: "{{ node_bin_path }}:{{ansible_env.PATH}}"

  block:
    - shell: "{{ pnpm_bin_path }}/pnpm --version"
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_version

    - name: "Create dummy package.json"
      template:
        src: package.j2
        dest: "{{ remote_tmp_dir }}/package.json"

    - name: "Install all packages."
      pnpm:
        path: "{{ remote_tmp_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"

    - name: "Install the same package from package.json again."
      pnpm:
        path: "{{ remote_tmp_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        name: "{{ package }}"
        state: present
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_install

    - name: "Assert that result is not changed"
      assert:
        that:
          - not (pnpm_install is changed)

    - name: "Install all packages in check mode."
      pnpm:
        path: "{{ remote_tmp_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      check_mode: true
      register: pnpm_install_check

    - name: "Verify test pnpm global installation in check mode"
      assert:
        that:
          - pnpm_install_check.err is defined
          - pnpm_install_check.out is defined
          - pnpm_install_check.err is none
          - pnpm_install_check.out is none

    - name: "Install package without dependency"
      pnpm:
        path: "{{ remote_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
        name: "{{ package }}"
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_install

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_install is success
          - pnpm_install is changed

    - name: "Reinstall package without dependency"
      pnpm:
        path: "{{ remote_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
        name: "{{ package }}"
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_reinstall

    - name: "Assert that there is no change"
      assert:
        that:
          - pnpm_reinstall is success
          - not (pnpm_reinstall is changed)

    - name: "Manually delete package"
      file:
        path: "{{ remote_dir }}/node_modules/{{ package }}"
        state: absent

    - name: "Reinstall package"
      pnpm:
        path: "{{ remote_dir }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
        name: "{{ package }}"
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_fix_install

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_fix_install is success
          - pnpm_fix_install is changed

    - name: "Install package with version, without executable path"
      pnpm:
        name: "{{ package }}"
        version: 0.1.3
        path: "{{ remote_dir }}"
        state: present
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_install

    - name: "Assert that package with version is installed"
      assert:
        that:
          - pnpm_install is success
          - pnpm_install is changed

    - name: "Reinstall package with version, without explicit executable path"
      pnpm:
        name: "{{ package }}"
        version: 0.1.3
        path: "{{ remote_dir }}"
        state: present
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_reinstall

    - name: "Assert that there is no change"
      assert:
        that:
          - pnpm_reinstall is success
          - not (pnpm_reinstall is changed)

    - name: "Update package, without executable path"
      pnpm:
        name: "{{ package }}"
        path: "{{ remote_dir }}"
        state: latest
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_update

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_update is success
          - pnpm_update is changed

    - name: "Remove package, without executable path"
      pnpm:
        name: "{{ package }}"
        path: "{{ remote_dir }}"
        state: absent
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_absent

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_absent is success
          - pnpm_absent is changed

    - name: "Install package with version and alias, without executable path"
      pnpm:
        name: "{{ package }}"
        alias: tailwind-1
        version: 0.1.3
        path: "{{ remote_dir }}"
        state: present
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_install

    - name: "Assert that package with version and alias is installed"
      assert:
        that:
          - pnpm_install is success
          - pnpm_install is changed

    - name: "Reinstall package with version and alias, without explicit executable path"
      pnpm:
        name: "{{ package }}"
        alias: tailwind-1
        version: 0.1.3
        path: "{{ remote_dir }}"
        state: present
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_reinstall

    - name: "Assert that there is no change"
      assert:
        that:
          - pnpm_reinstall is success
          - not (pnpm_reinstall is changed)

    - name: "Remove package with alias, without executable path"
      pnpm:
        name: "tailwind-1"
        path: "{{ remote_dir }}"
        state: absent
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_absent

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_absent is success
          - pnpm_absent is changed

    - name: "Install package without dependency globally"
      pnpm:
        name: "{{ package }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        state: present
        global: true
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_install

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_install is success
          - pnpm_install is changed

    - name: "Reinstall package globally, without explicit executable path"
      pnpm:
        name: "{{ package }}"
        state: present
        global: true
      environment:
        PATH: "{{ pnpm_bin_path }}:{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_reinstall

    - name: "Assert that there is no change"
      assert:
        that:
          - pnpm_reinstall is success
          - not (pnpm_reinstall is changed)

    - name: "Remove package without dependency globally"
      pnpm:
        name: "{{ package }}"
        executable: "{{ pnpm_bin_path }}/pnpm"
        global: true
        state: absent
      environment:
        PATH: "{{ node_bin_path }}:{{ ansible_env.PATH }}"
      register: pnpm_absent

    - name: "Assert that result is changed and successful"
      assert:
        that:
          - pnpm_absent is success
          - pnpm_absent is changed
