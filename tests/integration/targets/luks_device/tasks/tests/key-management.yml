- name: Create with keyfile1
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
    keyfile: '{{ role_path }}/files/keyfile1'
  become: true
- name: Try to open with keyfile1
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile1'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
  become: true
- name: Try to open with keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is failed
- name: Give access to keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
    keyfile: '{{ role_path }}/files/keyfile1'
    new_keyfile: '{{ role_path }}/files/keyfile2'
  become: true
- name: Try to open with keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
  become: true
- name: Dump LUKS header
  command: cryptsetup luksDump {{ cryptfile_device }}
  become: true
- name: Remove access from keyfile1
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
    keyfile: '{{ role_path }}/files/keyfile1'
    remove_keyfile: '{{ role_path }}/files/keyfile1'
  become: true
- name: Try to open with keyfile1
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile1'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is failed
- name: Try to open with keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
  become: true
- name: Dump LUKS header
  command: cryptsetup luksDump {{ cryptfile_device }}
  become: true
- name: Remove access from keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
    keyfile: '{{ role_path }}/files/keyfile2'
    remove_keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: remove_last_key
- assert:
    that:
    - remove_last_key is failed
    - '''force_remove_last_key'' in remove_last_key.msg'
- name: Try to open with keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
  become: true
- name: Remove access from keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: closed
    keyfile: '{{ role_path }}/files/keyfile2'
    remove_keyfile: '{{ role_path }}/files/keyfile2'
    force_remove_last_key: true
  become: true
- name: Try to open with keyfile2
  luks_device:
    device: '{{ cryptfile_device }}'
    state: opened
    keyfile: '{{ role_path }}/files/keyfile2'
  become: true
  ignore_errors: true
  register: open_try
- assert:
    that:
    - open_try is failed
