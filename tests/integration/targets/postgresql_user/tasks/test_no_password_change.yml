- vars:
    task_parameters:
      become_user: '{{ pg_user }}'
      become: true
      register: result
    postgresql_parameters:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
  block:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Create a user with all role attributes
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: present
      role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB,INHERIT,LOGIN{{ bypassrls_supported
        | ternary(',BYPASSRLS', '') }}
      no_password_changes: '{{ no_password_changes }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that the user has the requested role attributes
    shell: echo "select 'super:'||rolsuper, 'createrole:'||rolcreaterole, 'create:'||rolcreatedb,
      'inherit:'||rolinherit, 'login:'||rolcanlogin {{ bypassrls_supported | ternary(",
      'bypassrls:'||rolbypassrls", '') }} from pg_roles where rolname='{{ db_user1
      }}';" | psql -d postgres
  - assert:
      that:
      - result.stdout_lines[-1] == '(1 row)'
      - '''super:t'' in result.stdout_lines[-2]'
      - '''createrole:t'' in result.stdout_lines[-2]'
      - '''create:t'' in result.stdout_lines[-2]'
      - '''inherit:t'' in result.stdout_lines[-2]'
      - '''login:t'' in result.stdout_lines[-2]'
  - block:
    - become_user: '{{ pg_user }}'
      become: true
      register: result
      name: Check that the user has the requested role attribute BYPASSRLS
      shell: echo "select 'bypassrls:'||rolbypassrls from pg_roles where rolname='{{
        db_user1 }}';" | psql -d postgres
    - assert:
        that:
        - not bypassrls_supported or 'bypassrls:t' in result.stdout_lines[-2]
    when: bypassrls_supported
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Modify a user to have no role attributes
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: present
      role_attr_flags: NOSUPERUSER,NOCREATEROLE,NOCREATEDB,noinherit,NOLOGIN{{ bypassrls_supported
        | ternary(',NOBYPASSRLS', '') }}
      no_password_changes: '{{ no_password_changes }}'
  - name: Check that ansible reports it modified the role
    assert:
      that:
      - result is changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that the user doesn't have any attribute
    shell: echo "select 'super:'||rolsuper, 'createrole:'||rolcreaterole, 'create:'||rolcreatedb,
      'inherit:'||rolinherit, 'login:'||rolcanlogin from pg_roles where rolname='{{
      db_user1 }}';" | psql -d postgres
  - assert:
      that:
      - result.stdout_lines[-1] == '(1 row)'
      - '''super:f'' in result.stdout_lines[-2]'
      - '''createrole:f'' in result.stdout_lines[-2]'
      - '''create:f'' in result.stdout_lines[-2]'
      - '''inherit:f'' in result.stdout_lines[-2]'
      - '''login:f'' in result.stdout_lines[-2]'
  - block:
    - become_user: '{{ pg_user }}'
      become: true
      register: result
      name: Check that the user has the requested role attribute BYPASSRLS
      shell: echo "select 'bypassrls:'||rolbypassrls from pg_roles where rolname='{{
        db_user1 }}';" | psql -d postgres
    - assert:
        that:
        - not bypassrls_supported or 'bypassrls:f' in result.stdout_lines[-2]
    when: bypassrls_supported
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Try to add an invalid attribute
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: present
      role_attr_flags: NOSUPERUSER,NOCREATEROLE,NOCREATEDB,noinherit,NOLOGIN{{ bypassrls_supported
        | ternary(',NOBYPASSRLS', '') }},INVALID
      no_password_changes: '{{ no_password_changes }}'
    ignore_errors: true
  - name: Check that ansible reports failure
    assert:
      that:
      - result is not changed
      - result is failed
      - 'result.msg == ''Invalid role_attr_flags specified: INVALID'''
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Modify a single role attribute on a user
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: present
      role_attr_flags: LOGIN
      no_password_changes: '{{ no_password_changes }}'
  - name: Check that ansible reports it modified the role
    assert:
      that:
      - result is changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check the role attributes
    shell: echo "select 'super:'||rolsuper, 'createrole:'||rolcreaterole, 'create:'||rolcreatedb,
      'inherit:'||rolinherit, 'login:'||rolcanlogin from pg_roles where rolname='{{
      db_user1 }}';" | psql -d postgres
  - assert:
      that:
      - result.stdout_lines[-1] == '(1 row)'
      - '''super:f'' in result.stdout_lines[-2]'
      - '''createrole:f'' in result.stdout_lines[-2]'
      - '''create:f'' in result.stdout_lines[-2]'
      - '''inherit:f'' in result.stdout_lines[-2]'
      - '''login:t'' in result.stdout_lines[-2]'
  - block:
    - become_user: '{{ pg_user }}'
      become: true
      register: result
      name: Check the role attribute BYPASSRLS
      shell: echo "select 'bypassrls:'||rolbypassrls from pg_roles where rolname='{{
        db_user1 }}';" | psql -d postgres
    - assert:
        that:
        - ( postgres_version_resp.stdout is version('9.5.0', '<')) or 'bypassrls:f'
          in result.stdout_lines[-2]
    when: bypassrls_supported
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that using same attribute a second time does nothing
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: present
      role_attr_flags: LOGIN
      no_password_changes: '{{ no_password_changes }}'
    environment:
      PGOPTIONS: -c default_transaction_read_only=on
  - name: Check there isn't any update reported
    assert:
      that:
      - result is not changed
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Cleanup the user
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: absent
      no_password_changes: '{{ no_password_changes }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Check that user was removed
    shell: echo "select * from pg_user where usename='{{ db_user1 }}';" | psql -d
      postgres
  - assert:
      that:
      - result.stdout_lines[-1] == '(0 rows)'
  always:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: Cleanup the user
    postgresql_user:
      db: postgres
      name: '{{ db_user1 }}'
      login_user: '{{ pg_user }}'
      state: absent
