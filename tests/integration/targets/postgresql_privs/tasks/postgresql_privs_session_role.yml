- name: Create a high privileged user
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ db_session_role1 }}"
    state: "present"
    password: "password"
    role_attr_flags: "CREATEDB,LOGIN,CREATEROLE"
    login_user: "{{ pg_user }}"
    db: postgres

- name: Create a low privileged user using the newly created user
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ db_session_role2 }}"
    state: "present"
    password: "password"
    role_attr_flags: "LOGIN"
    login_user: "{{ pg_user }}"
    session_role: "{{ db_session_role1 }}"
    db: postgres

- name: Create DB as session_role
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: present
    name: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    session_role: "{{ db_session_role1 }}"
  register: result

- name: Create table to be able to grant privileges
  become_user: "{{ pg_user }}"
  become: yes
  shell: echo "CREATE TABLE test(i int); CREATE TABLE test2(i int);" | psql -AtXq "{{ db_session_role1 }}"

- name: Grant all privileges on test1 table to low privileged user
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_privs:
    db: "{{ db_session_role1 }}"
    type: table
    objs: test
    roles: "{{ db_session_role2 }}"
    login_user: "{{ pg_user }}"
    privs: select
    admin_option: yes

- name: Verify admin option was successful for grants
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_privs:
    db: "{{ db_session_role1 }}"
    type: table
    objs: test
    roles: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    privs: select
    session_role: "{{ db_session_role2 }}"

- name: Verify no grants can be granted for test2 table
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_privs:
    db: "{{ db_session_role1 }}"
    type: table
    objs: test2
    roles: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    privs: update
    session_role: "{{ db_session_role2 }}"
  ignore_errors: yes
  register: result

- assert:
    that:
      - result is failed

########################
# Test trust_input param

- name: Verify trust_input parameter
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_privs:
    db: "{{ db_session_role1 }}"
    type: table
    objs: test2
    roles: "{{ db_session_role1 }}"
    login_user: "{{ pg_user }}"
    privs: update
    session_role: "{{ dangerous_name }}"
    trust_input: no
  ignore_errors: yes
  register: result

- assert:
    that:
      - result is failed
      - result.msg == 'Passed input \'{{ dangerous_name }}\' is potentially dangerous'
