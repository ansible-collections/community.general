---
- name: "ensure our next backup is not there (file)"
  file:
    path: "{{ iptables_saved }}"
    state: absent

- name: "ensure our next rule is not there (iptables)"
  iptables:
    chain: OUTPUT
    jump: ACCEPT
    state: absent


#
# Play with the current state first. We will create a file to store it in, but
# no more. These tests are for:
# - idempotency
# - check_mode
#
- name: "save state (check_mode, must report a change)"
  iptables_state:
    path: "{{ iptables_saved }}"
    state: saved
  register: iptables_state
  check_mode: yes

- name: "assert that results are as expected"
  assert:
    that:
      - iptables_state is changed
      - iptables_state.initial_state == iptables_state.saved
    quiet: yes



- name: "save state (must report a change)"
  iptables_state:
    path: "{{ iptables_saved }}"
    state: saved
  register: iptables_state

- name: "assert that results are as expected"
  assert:
    that:
      - iptables_state is changed
      - iptables_state.initial_state == iptables_state.saved
    quiet: yes



- name: "save state (idempotency, must NOT report a change)"
  iptables_state:
    path: "{{ iptables_saved }}"
    state: saved
  register: iptables_state

- name: "assert that results are as expected"
  assert:
    that:
      - iptables_state is not changed
      - iptables_state.initial_state == iptables_state.saved
    quiet: yes



- name: "save state (check_mode, must NOT report a change)"
  iptables_state:
    path: "{{ iptables_saved }}"
    state: saved
  register: iptables_state
  check_mode: yes

- name: "assert that results are as expected"
  assert:
    that:
      - iptables_state is not changed
      - iptables_state.initial_state == iptables_state.saved
    quiet: yes



# We begin with 'state=restored' by restoring the current state on itself.
# This at least ensures the file produced with state=saved is suitable for
# state=restored.

- name: "state=restored check_mode=true changed=false"
  block:
    - name: "restore state (check_mode, must NOT report a change, no warning)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state
      check_mode: yes

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is not changed
          - iptables_state.initial_state == iptables_state.restored
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock



- name: "state=restored changed=false"
  block:
    - name: "restore state (must NOT report a change, warning about rollback & async)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is not changed
          - iptables_state.initial_state == iptables_state.restored
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock



- name: "change iptables state (iptables)"
  iptables:
    chain: OUTPUT
    jump: ACCEPT



- name: "state=restored changed=true"
  block:
    - name: "restore state (check_mode, must report a change)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state
      check_mode: yes

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is changed
          - iptables_state.initial_state != iptables_state.restored
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock



- name: "state=restored changed=true"
  block:
    - name: "restore state (must report a change, async, no warning)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state
      async: "{{ ansible_timeout }}"
      poll: 0

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is changed
          - iptables_state.initial_state != iptables_state.restored
          - iptables_state.applied
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock



- name: "state=restored changed=false"
  block:
    - name: "restore state (must NOT report a change, async, no warning)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state
      async: "{{ ansible_timeout }}"
      poll: 0

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is not changed
          - iptables_state.initial_state == iptables_state.restored
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock



- name: "state=restored changed=false"
  block:
    - name: "restore state (check_mode=yes, must NOT report a change, no warning)"
      iptables_state:
        path: "{{ iptables_saved }}"
        state: restored
      register: iptables_state
      check_mode: yes

    - name: "assert that results are as expected"
      assert:
        that:
          - iptables_state is not changed
          - iptables_state.initial_state == iptables_state.restored
        quiet: yes

  rescue:
    - name: "assert that results are not as expected for only one reason (xtables lock)"
      assert:
        that:
          - iptables_state is failed
          - iptables_state.stderr is search('xtables lock')
        quiet: yes
      register: xtables_lock
