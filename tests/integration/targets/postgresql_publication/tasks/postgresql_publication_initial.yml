- vars:
    test_table1: acme1
    test_table2: acme2
    test_table3: acme3
    test_pub: acme_publ
    test_role: alice
    test_schema: acme_schema
    test_db: acme_db
    task_parameters:
      become_user: '{{ pg_user }}'
      become: true
      register: result
    pg_parameters:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
  block:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create test db
    postgresql_db:
      login_user: '{{ pg_user }}'
      maintenance_db: postgres
      name: '{{ test_db }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create test schema
    postgresql_schema:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_schema }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create test role
    postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_role }}'
      role_attr_flags: SUPERUSER
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create test tables
    postgresql_table:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ item }}'
      columns:
      - id int
    loop:
    - '{{ test_table1 }}'
    - '{{ test_schema }}.{{ test_table2 }}'
    - '{{ test_table3 }}'
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create publication, check_mode
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
    check_mode: true
  - assert:
      that:
      - result is changed
      - result.exists == false
      - result.queries == ["CREATE PUBLICATION \"{{ test_pub }}\" FOR ALL TABLES"]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that nothing has been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create publication
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
  - assert:
      that:
      - result is changed
      - result.exists == true
      - result.queries == ["CREATE PUBLICATION \"{{ test_pub }}\" FOR ALL TABLES"]
      - result.owner == '{{ pg_user }}'
      - result.alltables == true
      - result.tables == []
      - result.parameters.publish != {}
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that nothing has been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM pg_publication WHERE pubname = ''{{ test_pub }}'' AND
        pubowner = ''10'' AND puballtables = ''t''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - drop publication, check_mode
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      state: absent
    check_mode: true
  - assert:
      that:
      - result is changed
      - result.exists == true
      - result.queries == ["DROP PUBLICATION \"{{ test_pub }}\""]
      - result.owner == '{{ pg_user }}'
      - result.alltables == true
      - result.tables == []
      - result.parameters.publish != {}
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that nothing has been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - drop publication
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      state: absent
      cascade: true
  - assert:
      that:
      - result is changed
      - result.exists == false
      - result.queries == ["DROP PUBLICATION \"{{ test_pub }}\" CASCADE"]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that publication does not exist
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - create publication with tables, owner, params
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      owner: '{{ test_role }}'
      tables:
      - '{{ test_table1 }}'
      - '{{ test_schema }}.{{ test_table2 }}'
      parameters:
        publish: insert
  - assert:
      that:
      - result is changed
      - result.queries == ["CREATE PUBLICATION \"{{ test_pub }}\" FOR TABLE \"public\".\"{{
        test_table1 }}\", \"{{ test_schema }}\".\"{{ test_table2 }}\" WITH (publish
        = 'insert')", "ALTER PUBLICATION \"{{ test_pub }}\" OWNER TO \"{{ test_role
        }}\""]
      - result.owner == '{{ test_role }}'
      - result.tables == ["\"public\".\"{{ test_table1 }}\"", "\"{{ test_schema }}\".\"{{
        test_table2 }}\""]
      - result.parameters.publish.insert == true
      - result.parameters.publish.delete == false
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that test publication exists
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM pg_publication WHERE pubname = ''{{ test_pub }}''  AND
        pubowner != ''10'' AND puballtables = ''f'' AND pubinsert = ''t'' AND pubdelete
        = ''f''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that test_table1 from schema public is in
      publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
        AND schemaname = 'public'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that test_table2 from test schema is in publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
        AND schemaname = '{{ test_schema }}'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - add table to publication, change owner, check_mode
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      owner: '{{ pg_user }}'
      tables:
      - '{{ test_table1 }}'
      - '{{ test_schema }}.{{ test_table2 }}'
      - '{{ test_table3 }}'
    check_mode: true
  - assert:
      that:
      - result is changed
      - result.queries == ["ALTER PUBLICATION \"{{ test_pub }}\" ADD TABLE \"public\".\"{{
        test_table3 }}\"", "ALTER PUBLICATION \"{{ test_pub }}\" OWNER TO \"{{ pg_user
        }}\""]
      - result.tables == ["\"public\".\"{{ test_table1 }}\"", "\"{{ test_schema }}\".\"{{
        test_table2 }}\""]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that nothing changes after the previous step
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM pg_publication WHERE pubname = ''{{ test_pub }}''  AND
        pubowner != ''10'' AND puballtables = ''f'' AND pubinsert = ''t'' AND pubupdate
        = ''t''

        '
  - assert:
      that:
      - result.rowcount == 0
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that 2 tables are in publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 2
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - add table to publication, change owner
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      owner: '{{ pg_user }}'
      tables:
      - '{{ test_table1 }}'
      - '{{ test_schema }}.{{ test_table2 }}'
      - '{{ test_table3 }}'
  - assert:
      that:
      - result is changed
      - result.queries == ["ALTER PUBLICATION \"{{ test_pub }}\" ADD TABLE \"public\".\"{{
        test_table3 }}\"", "ALTER PUBLICATION \"{{ test_pub }}\" OWNER TO \"{{ pg_user
        }}\""]
      - result.tables == ["\"public\".\"{{ test_table1 }}\"", "\"{{ test_schema }}\".\"{{
        test_table2 }}\"", "\"public\".\"{{ test_table3 }}\""]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check owner has been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM pg_publication WHERE pubname = ''{{ test_pub }}'' AND
        pubowner = ''10''

        '
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that 3 tables are in publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 3
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - remove table from publication, check_mode
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      tables:
      - '{{ test_table1 }}'
      - '{{ test_schema }}.{{ test_table2 }}'
      parameters:
        publish: insert
    check_mode: true
  - assert:
      that:
      - result is changed
      - result.queries == ["ALTER PUBLICATION \"{{ test_pub }}\" DROP TABLE \"public\".\"{{
        test_table3 }}\""]
      - result.tables == ["\"public\".\"{{ test_table1 }}\"", "\"{{ test_schema }}\".\"{{
        test_table2 }}\"", "\"public\".\"{{ test_table3 }}\""]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that 3 tables are in publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 3
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check no parameters have been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication WHERE pubname = '{{ test_pub }}' AND pubinsert
        = 't'
  - assert:
      that:
      - result.rowcount == 1
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - remove table from publication
    postgresql_publication:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      name: '{{ test_pub }}'
      tables:
      - '{{ test_table1 }}'
      - '{{ test_schema }}.{{ test_table2 }}'
      parameters:
        publish: delete
  - assert:
      that:
      - result is changed
      - result.queries == ["ALTER PUBLICATION \"{{ test_pub }}\" DROP TABLE \"public\".\"{{
        test_table3 }}\"", "ALTER PUBLICATION \"{{ test_pub }}\" SET (publish = 'delete')"]
      - result.tables == ["\"public\".\"{{ test_table1 }}\"", "\"{{ test_schema }}\".\"{{
        test_table2 }}\""]
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check that 2 tables are in publication
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication_tables WHERE pubname = '{{ test_pub }}'
  - assert:
      that:
      - result.rowcount == 2
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - check parameter has been changed
    postgresql_query:
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'
      query: SELECT * FROM pg_publication WHERE pubname = '{{ test_pub }}' AND pubinsert
        = 'f'
  - assert:
      that:
      - result.rowcount == 1
  always:
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - remove test db
    postgresql_db:
      login_user: '{{ pg_user }}'
      maintenance_db: postgres
      name: '{{ test_db }}'
      state: absent
  - become_user: '{{ pg_user }}'
    become: true
    register: result
    name: postgresql_publication - remove test role
    postgresql_user:
      login_user: '{{ pg_user }}'
      login_db: postgres
      name: '{{ test_role }}'
      state: absent
